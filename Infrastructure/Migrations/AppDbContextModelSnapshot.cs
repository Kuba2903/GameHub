// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Game_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Game_PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Game_PublisherId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Game_Platforms");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game_Publishers");
                });

            modelBuilder.Entity("Infrastructure.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Infrastructure.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Platform_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Infrastructure.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Publisher_Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Infrastructure.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Region_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Infrastructure.Entities.Region_Sales", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Game_PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("Num_Sales")
                        .HasColumnType("int");

                    b.HasKey("RegionId", "Game_PlatformId");

                    b.HasIndex("Game_PlatformId");

                    b.ToTable("Region_Sales");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game", b =>
                {
                    b.HasOne("Infrastructure.Entities.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Platform", b =>
                {
                    b.HasOne("Infrastructure.Entities.Game_Publisher", "Game_Publisher")
                        .WithMany("Game_Platforms")
                        .HasForeignKey("Game_PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Platform", "Platform")
                        .WithMany("Game_Platforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game_Publisher");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Publisher", b =>
                {
                    b.HasOne("Infrastructure.Entities.Game", "Game")
                        .WithMany("Games_Publishers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Publisher", "Publisher")
                        .WithMany("Games_Publishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Infrastructure.Entities.Region_Sales", b =>
                {
                    b.HasOne("Infrastructure.Entities.Game_Platform", "Game_Platform")
                        .WithMany("Region_Sales")
                        .HasForeignKey("Game_PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Region", "Region")
                        .WithMany("Region_Sales")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game_Platform");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game", b =>
                {
                    b.Navigation("Games_Publishers");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Platform", b =>
                {
                    b.Navigation("Region_Sales");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Publisher", b =>
                {
                    b.Navigation("Game_Platforms");
                });

            modelBuilder.Entity("Infrastructure.Entities.Genre", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Infrastructure.Entities.Platform", b =>
                {
                    b.Navigation("Game_Platforms");
                });

            modelBuilder.Entity("Infrastructure.Entities.Publisher", b =>
                {
                    b.Navigation("Games_Publishers");
                });

            modelBuilder.Entity("Infrastructure.Entities.Region", b =>
                {
                    b.Navigation("Region_Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
