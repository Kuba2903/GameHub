// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240724000211_alterPublisher")]
    partial class alterPublisher
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Game_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "\"The Witcher\" is an action role-playing game developed by CD Projekt Red, based on the book series by Andrzej Sapkowski. Set in a richly detailed, medieval fantasy world, players assume the role of Geralt of Rivia, a skilled monster hunter known as a Witcher. The game is renowned for its mature narrative, complex characters, and moral ambiguity, offering players a deeply immersive experience. In \"The Witcher,\" Geralt navigates through a world filled with political intrigue, supernatural threats, and moral dilemmas. Players make choices that influence the story and its outcome, engaging in combat with a variety of weapons and magical abilities. The game's open-world design allows for extensive exploration, with numerous side quests and activities to pursue alongside the main storyline",
                            Game_Name = "The Witcher",
                            GenreId = 1,
                            PublisherId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "\"Warcraft\" is a high-fantasy, real-time strategy game series developed and published by Blizzard Entertainment. Set in the expansive and lore-rich world of Azeroth, the game focuses on the epic conflict between various factions, primarily the Alliance and the Horde, as well as other races and factions with their own agendas.",
                            Game_Name = "Warcraft",
                            GenreId = 2,
                            PublisherId = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "\"Call of Duty\" is a highly popular first-person shooter (FPS) video game series developed and published by Activision. Initially set in World War II, the franchise has since expanded to cover various historical periods, modern-day conflicts, and futuristic settings. Known for its intense gameplay, cinematic storytelling, and competitive multiplayer modes, \"Call of Duty\" has become one of the best-selling game franchises of all time.",
                            Game_Name = "Call of Duty",
                            GenreId = 3,
                            PublisherId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "\"FIFA\" is a long-standing and immensely popular series of football (soccer) simulation video games developed and published by Electronic Arts (EA) under the EA Sports label. Known for its realistic gameplay, extensive licensing, and comprehensive game modes, \"FIFA\" has become the go-to title for football fans around the world.",
                            Game_Name = "Fifa",
                            GenreId = 4,
                            PublisherId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "\"Farming Simulator\" is a series of simulation video games developed by Giants Software. It offers players an immersive and detailed experience of managing a modern farm. The game emphasizes realistic farming activities, including cultivating crops, raising livestock, and managing machinery. It has gained a dedicated fanbase for its authentic representation of agricultural life and its comprehensive gameplay mechanics.",
                            Game_Name = "Farming Simulator",
                            GenreId = 5,
                            PublisherId = 4
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Game_Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            PlatformId = 1,
                            ReleaseYear = 2015
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            PlatformId = 3,
                            ReleaseYear = 2015
                        },
                        new
                        {
                            Id = 3,
                            GameId = 1,
                            PlatformId = 7,
                            ReleaseYear = 2015
                        },
                        new
                        {
                            Id = 4,
                            GameId = 1,
                            PlatformId = 2,
                            ReleaseYear = 2023
                        },
                        new
                        {
                            Id = 5,
                            GameId = 1,
                            PlatformId = 8,
                            ReleaseYear = 2023
                        },
                        new
                        {
                            Id = 6,
                            GameId = 5,
                            PlatformId = 1,
                            ReleaseYear = 2020
                        },
                        new
                        {
                            Id = 7,
                            GameId = 5,
                            PlatformId = 9,
                            ReleaseYear = 2021
                        },
                        new
                        {
                            Id = 8,
                            GameId = 2,
                            PlatformId = 1,
                            ReleaseYear = 2000
                        },
                        new
                        {
                            Id = 9,
                            GameId = 2,
                            PlatformId = 5,
                            ReleaseYear = 2005
                        },
                        new
                        {
                            Id = 10,
                            GameId = 3,
                            PlatformId = 1,
                            ReleaseYear = 2012
                        },
                        new
                        {
                            Id = 11,
                            GameId = 3,
                            PlatformId = 4,
                            ReleaseYear = 2013
                        },
                        new
                        {
                            Id = 12,
                            GameId = 3,
                            PlatformId = 6,
                            ReleaseYear = 2013
                        },
                        new
                        {
                            Id = 13,
                            GameId = 4,
                            PlatformId = 8,
                            ReleaseYear = 2023
                        },
                        new
                        {
                            Id = 14,
                            GameId = 4,
                            PlatformId = 2,
                            ReleaseYear = 2023
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre_Name = "RPG"
                        },
                        new
                        {
                            Id = 2,
                            Genre_Name = "RTS"
                        },
                        new
                        {
                            Id = 3,
                            Genre_Name = "Shooters"
                        },
                        new
                        {
                            Id = 4,
                            Genre_Name = "Sports"
                        },
                        new
                        {
                            Id = 5,
                            Genre_Name = "Simulators"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Platform_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Platform_Name = "Windows"
                        },
                        new
                        {
                            Id = 2,
                            Platform_Name = "Play Station 5"
                        },
                        new
                        {
                            Id = 3,
                            Platform_Name = "Play Station 4"
                        },
                        new
                        {
                            Id = 4,
                            Platform_Name = "Play Station 3"
                        },
                        new
                        {
                            Id = 5,
                            Platform_Name = "Play Station 2"
                        },
                        new
                        {
                            Id = 6,
                            Platform_Name = "Xbox360"
                        },
                        new
                        {
                            Id = 7,
                            Platform_Name = "Xbox One"
                        },
                        new
                        {
                            Id = 8,
                            Platform_Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = 9,
                            Platform_Name = "Android"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Publisher_Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Publisher_Name = "EA Sports",
                            StockSymbol = "NASDAQ"
                        },
                        new
                        {
                            Id = 2,
                            Publisher_Name = "CD Projekt Red",
                            StockSymbol = "OTGLY"
                        },
                        new
                        {
                            Id = 3,
                            Publisher_Name = "Blizzard",
                            StockSymbol = "ATVI"
                        },
                        new
                        {
                            Id = 4,
                            Publisher_Name = "GIANTS Software",
                            StockSymbol = "GGLT"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Region_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Region_Name = "Europa"
                        },
                        new
                        {
                            Id = 2,
                            Region_Name = "North America"
                        },
                        new
                        {
                            Id = 3,
                            Region_Name = "Asia"
                        },
                        new
                        {
                            Id = 4,
                            Region_Name = "Other"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Region_Sales", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Game_PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("Num_Sales")
                        .HasColumnType("int");

                    b.HasKey("RegionId", "Game_PlatformId");

                    b.HasIndex("Game_PlatformId");

                    b.ToTable("Region_Sales");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            Game_PlatformId = 1,
                            Num_Sales = 90
                        },
                        new
                        {
                            RegionId = 1,
                            Game_PlatformId = 2,
                            Num_Sales = 30
                        },
                        new
                        {
                            RegionId = 2,
                            Game_PlatformId = 2,
                            Num_Sales = 40
                        },
                        new
                        {
                            RegionId = 2,
                            Game_PlatformId = 8,
                            Num_Sales = 60
                        },
                        new
                        {
                            RegionId = 3,
                            Game_PlatformId = 8,
                            Num_Sales = 65
                        },
                        new
                        {
                            RegionId = 3,
                            Game_PlatformId = 2,
                            Num_Sales = 65
                        },
                        new
                        {
                            RegionId = 3,
                            Game_PlatformId = 3,
                            Num_Sales = 200
                        },
                        new
                        {
                            RegionId = 3,
                            Game_PlatformId = 7,
                            Num_Sales = 220
                        },
                        new
                        {
                            RegionId = 4,
                            Game_PlatformId = 1,
                            Num_Sales = 50
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.RefreshTokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "User0",
                            Password = "password123!"
                        },
                        new
                        {
                            Id = 2,
                            Login = "User1",
                            Password = "password321!"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.User_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e5395923-5183-4164-ad6b-d2d38e2a7864",
                            ConcurrencyStamp = "e5395923-5183-4164-ad6b-d2d38e2a7864",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cec1b32-9380-424f-aa7a-3c57993d0c35",
                            Email = "User0@onet.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER0@ONET.PL",
                            NormalizedUserName = "USER0",
                            PasswordHash = "AQAAAAIAAYagAAAAEKa/tg7KByUKWGuCEDzVt3eOg9qlZfxM/h3tbIzvK5DrjXQmtSeYqLTp7mKcttQYWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc7b584c-9649-4607-96eb-e1fdc4b9d9a0",
                            TwoFactorEnabled = false,
                            UserName = "User0"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69f0ec78-21d9-4e76-b5da-2015af28b460",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEEeISYetixDMjOw7OhYrjqfOYB+KOI/rSg3O9SWiofLPq0fMsWsJ7+apuPhY16merg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "820dd043-e3aa-43ca-8009-be9ff2ca8291",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "e5395923-5183-4164-ad6b-d2d38e2a7864"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Game", b =>
                {
                    b.HasOne("Infrastructure.Entities.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Platform", b =>
                {
                    b.HasOne("Infrastructure.Entities.Game", "Game")
                        .WithMany("Platforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Platform", "Platform")
                        .WithMany("Game_Platforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Infrastructure.Entities.Region_Sales", b =>
                {
                    b.HasOne("Infrastructure.Entities.Game_Platform", "Game_Platform")
                        .WithMany("Region_Sales")
                        .HasForeignKey("Game_PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Region", "Region")
                        .WithMany("Region_Sales")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game_Platform");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.User_Role", b =>
                {
                    b.HasOne("Infrastructure.Entities.User_Roles_Entities.Role", "Role")
                        .WithMany("User_Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User_Roles_Entities.User", "User")
                        .WithMany("User_Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.Game", b =>
                {
                    b.Navigation("Platforms");
                });

            modelBuilder.Entity("Infrastructure.Entities.Game_Platform", b =>
                {
                    b.Navigation("Region_Sales");
                });

            modelBuilder.Entity("Infrastructure.Entities.Genre", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Infrastructure.Entities.Platform", b =>
                {
                    b.Navigation("Game_Platforms");
                });

            modelBuilder.Entity("Infrastructure.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Infrastructure.Entities.Region", b =>
                {
                    b.Navigation("Region_Sales");
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.Role", b =>
                {
                    b.Navigation("User_Roles");
                });

            modelBuilder.Entity("Infrastructure.Entities.User_Roles_Entities.User", b =>
                {
                    b.Navigation("User_Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
